{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hzrh7y-alxBI"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Load the dataset\n",
        "uber_data = pd.read_csv('/content/uber.csv')\n",
        "\n",
        "# Drop rows with NaN values in 'fare_amount' and location columns\n",
        "uber_data = uber_data.dropna(subset=['fare_amount', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'])\n",
        "\n",
        "# Remove rows with invalid 'fare_amount' (e.g., negative fares)\n",
        "uber_data = uber_data[uber_data['fare_amount'] > 0]\n",
        "\n",
        "# Filter out invalid or extreme longitude and latitude values\n",
        "uber_data = uber_data[\n",
        "    (uber_data['pickup_longitude'] >= -180) & (uber_data['pickup_longitude'] <= 180) &\n",
        "    (uber_data['pickup_latitude'] >= -90) & (uber_data['pickup_latitude'] <= 90) &\n",
        "    (uber_data['dropoff_longitude'] >= -180) & (uber_data['dropoff_longitude'] <= 180) &\n",
        "    (uber_data['dropoff_latitude'] >= -90) & (uber_data['dropoff_latitude'] <= 90)\n",
        "]\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Feature engineering: Calculate distance between pickup and dropoff points using Haversine formula\n",
        "from math import radians, cos, sin, asin, sqrt\n",
        "\n",
        "def haversine(lon1, lat1, lon2, lat2):\n",
        "    # Convert decimal degrees to radians\n",
        "    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n",
        "    # Haversine formula\n",
        "    dlon = lon2 - lon1\n",
        "    dlat = lat2 - lat1\n",
        "    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n",
        "    c = 2 * asin(sqrt(a))\n",
        "    r = 6371  # Radius of Earth in kilometers\n",
        "    return c * r\n",
        "\n",
        "uber_data['distance'] = uber_data.apply(\n",
        "    lambda row: haversine(row['pickup_longitude'], row['pickup_latitude'], row['dropoff_longitude'], row['dropoff_latitude']), axis=1\n",
        ")\n",
        "\n",
        "# Remove rows with zero or very small distances\n",
        "uber_data = uber_data[uber_data['distance'] > 0.1]\n"
      ],
      "metadata": {
        "id": "Wtm7tj3ul7pv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a function to remove outliers based on IQR\n",
        "def remove_outliers(df, column):\n",
        "    Q1 = df[column].quantile(0.25)\n",
        "    Q3 = df[column].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "    lower_bound = Q1 - 1.5 * IQR\n",
        "    upper_bound = Q3 + 1.5 * IQR\n",
        "    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]\n",
        "\n",
        "# Remove outliers for selected columns\n",
        "uber_data = remove_outliers(uber_data, 'fare_amount')\n",
        "uber_data = remove_outliers(uber_data, 'distance')\n",
        "uber_data = remove_outliers(uber_data, 'passenger_count')\n"
      ],
      "metadata": {
        "id": "17nhDBHymrJM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Correlation matrix\n",
        "corr_matrix = uber_data[['fare_amount', 'distance', 'passenger_count']].corr()\n",
        "print(corr_matrix)\n",
        "\n",
        "# Plot the correlation heatmap\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "PLEWngkEpYl1",
        "outputId": "703cbc57-0004-4af1-cb5f-8760a6db227c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 fare_amount  distance  passenger_count\n",
            "fare_amount         1.000000  0.800347         0.017406\n",
            "distance            0.800347  1.000000         0.011036\n",
            "passenger_count     0.017406  0.011036         1.000000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Features and target variable\n",
        "X = uber_data[['distance', 'passenger_count']]\n",
        "y = uber_data['fare_amount']\n",
        "\n",
        "# Split the data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Linear Regression Model\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(X_train, y_train)\n",
        "y_pred_lin = lin_reg.predict(X_test)\n",
        "\n",
        "# Random Forest Model\n",
        "rf_reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf_reg.fit(X_train, y_train)\n",
        "y_pred_rf = rf_reg.predict(X_test)\n"
      ],
      "metadata": {
        "id": "ScUzyzs3pbqD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Linear Regression Evaluation\n",
        "r2_lin = r2_score(y_test, y_pred_lin)\n",
        "rmse_lin = mean_squared_error(y_test, y_pred_lin, squared=False)\n",
        "print(\"Linear Regression R2:\", r2_lin)\n",
        "print(\"Linear Regression RMSE:\", rmse_lin)\n",
        "\n",
        "# Random Forest Regression Evaluation\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = mean_squared_error(y_test, y_pred_rf, squared=False)\n",
        "print(\"Random Forest R2:\", r2_rf)\n",
        "print(\"Random Forest RMSE:\", rmse_rf)\n",
        "\n",
        "# Comparison\n",
        "if r2_rf > r2_lin:\n",
        "    print(\"Random Forest performs better based on R2 score.\")\n",
        "else:\n",
        "    print(\"Linear Regression performs better based on R2 score.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tBw63Lsxpe20",
        "outputId": "bfb33b77-6540-4c13-fec1-d9ba0b0f5e9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression R2: 0.647171881474573\n",
            "Linear Regression RMSE: 2.211442857367113\n",
            "Random Forest R2: 0.4987755518698881\n",
            "Random Forest RMSE: 2.6357866297340085\n",
            "Linear Regression performs better based on R2 score.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:492: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:492: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uS1N920xph-v"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}